openapi: 3.1.0
info:
  title: University Online Library API
  description: Üniversiteye ait çevrim içi kütüphane sistemi için RESTful API
  version: "1.0.0"

jsonSchemaDialect: "https://json-schema.org/draft/2020-12/schema"

servers:
  - url: https://api.university-library.com/v1

tags:
  - name: Books
    description: Kitaplarla ilgili işlemler
  - name: Students
    description: Öğrenci yönetimi
  - name: Loans
    description: Kitap ödünç alma işlemleri

paths:
  /books:
    get:
      tags: [Books]
      summary: Tüm kitapları getir
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Kitap listesi
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      tags: [Books]
      summary: Yeni kitap ekle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Kitap başarıyla eklendi
        '400':
          description: Geçersiz istek verisi

  /books/{id}:
    get:
      tags: [Books]
      summary: Tek bir kitabı getir
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Kitap bilgisi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Kitap bulunamadı
    put:
      tags: [Books]
      summary: Kitap güncelle
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Güncellendi
        '400':
          description: Geçersiz veri
    delete:
      tags: [Books]
      summary: Kitap sil
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Başarıyla silindi
        '404':
          description: Kitap bulunamadı

  /students:
    get:
      tags: [Students]
      summary: Tüm öğrencileri getir
      responses:
        '200':
          description: Öğrenci listesi
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
    post:
      tags: [Students]
      summary: Yeni öğrenci ekle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '201':
          description: Eklendi
        '400':
          description: Hatalı veri

  /students/{id}:
    get:
      tags: [Students]
      summary: Öğrenci bilgisi getir
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Öğrenci bulundu
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          description: Bulunamadı
    put:
      tags: [Students]
      summary: Öğrenci bilgisi güncelle
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '200':
          description: Güncellendi
    delete:
      tags: [Students]
      summary: Öğrenci sil
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Silindi

  /loans:
    get:
      tags: [Loans]
      summary: Tüm ödünç alma kayıtlarını getir
      responses:
        '200':
          description: Kayıtlar
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Loan'
    post:
      tags: [Loans]
      summary: Kitap ödünç al
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Loan'
      responses:
        '201':
          description: Kayıt oluşturuldu

  /loans/{id}:
    get:
      tags: [Loans]
      summary: Tek ödünç kaydı getir
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Kayıt bulundu
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        '404':
          description: Kayıt bulunamadı

  /loans/{id}/return:
    patch:
      tags: [Loans]
      summary: Kitabı iade et
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Başarıyla iade edildi
        '404':
          description: Kayıt bulunamadı

components:
  schemas:
    Book:
      type: object
      required: [id, title, author, isbn, publisher, pageCount, stock]
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
        publisher:
          type: string
        pageCount:
          type: integer
        stock:
          type: integer

    Student:
      type: object
      required: [id, name, studentNumber, email, isActive]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        studentNumber:
          type: string
        email:
          type: string
          format: email
        isActive:
          type: boolean

    Loan:
      type: object
      required: [id, studentId, bookId, loanDate, status]
      properties:
        id:
          type: string
          format: uuid
        studentId:
          type: string
          format: uuid
        bookId:
          type: string
          format: uuid
        loanDate:
          type: string
          format: date
        returnDate:
          type: string
          format: date
          nullable: true
        status:
          type: string
          enum: [ongoing, returned, late]
